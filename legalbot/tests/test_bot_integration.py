"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞ MyzamAI
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–≥–µ–Ω—Ç–æ–≤
"""

import asyncio
import sys
import os
import logging
from datetime import datetime

# Add parent directory to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class BotIntegrationTester:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –±–æ—Ç–∞
    """
    
    def __init__(self):
        """
        Initialize tester
        """
        self.test_results = []
        self.start_time = None
    
    async def test_article_commands(self):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã /law
        """
        print("üîç Testing /law commands...")
        
        # Test cases: (article_number, expected_keywords)
        test_cases = [
            (379, ["—Å–º–µ—Ä—Ç—å—é", "–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞", "–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ"]),
            (380, ["–ª–∏–∫–≤–∏–¥–∞—Ü–∏–µ–π", "—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ", "–ª–∏—Ü–∞"]),
            (381, ["–¥–æ–≥–æ–≤–æ—Ä", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö"]),
            (22, ["–æ–±—ä–µ–∫—Ç—ã", "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö", "–ø—Ä–∞–≤"]),
            (1, ["–æ—Ç–Ω–æ—à–µ–Ω–∏—è", "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º", "–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º"])
        ]
        
        for article_num, expected_keywords in test_cases:
            print(f"\nüìö Testing /law {article_num}:")
            
            try:
                # Simulate /law command
                result = await self._simulate_law_command(article_num)
                
                if result is None:
                    print(f"   ‚ùå Article {article_num}: NOT FOUND")
                    self.test_results.append({
                        'test': f'/law {article_num}',
                        'status': 'NOT_FOUND',
                        'message': 'Article not found'
                    })
                    continue
                
                # Check if result contains expected keywords
                found_keywords = []
                for keyword in expected_keywords:
                    if keyword.lower() in result.lower():
                        found_keywords.append(keyword)
                
                if len(found_keywords) >= len(expected_keywords) * 0.5:  # At least 50% of keywords
                    print(f"   ‚úÖ Article {article_num}: CORRECT")
                    print(f"   üìù Found keywords: {found_keywords}")
                    self.test_results.append({
                        'test': f'/law {article_num}',
                        'status': 'PASS',
                        'message': f'Found {len(found_keywords)}/{len(expected_keywords)} keywords',
                        'found_keywords': found_keywords
                    })
                else:
                    print(f"   ‚ùå Article {article_num}: INSUFFICIENT KEYWORDS")
                    print(f"   üìù Found: {found_keywords}")
                    print(f"   üìù Expected: {expected_keywords}")
                    self.test_results.append({
                        'test': f'/law {article_num}',
                        'status': 'FAIL',
                        'message': f'Only found {len(found_keywords)}/{len(expected_keywords)} keywords',
                        'found_keywords': found_keywords,
                        'expected_keywords': expected_keywords
                    })
                
                # Show preview
                print(f"   üìÑ Preview: {result[:150]}...")
                
            except Exception as e:
                print(f"   üö® Article {article_num}: ERROR - {str(e)}")
                self.test_results.append({
                    'test': f'/law {article_num}',
                    'status': 'ERROR',
                    'message': f'Exception: {str(e)}'
                })
    
    async def test_legal_queries(self):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        """
        print("\nüîç Testing legal queries...")
        
        # Test cases: (query, expected_keywords)
        test_cases = [
            (
                "–ú–æ–≥—É –ª–∏ —è –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ —á–µ–∫–∞?",
                ["—Å—Ç–∞—Ç—å—è", "–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π", "–∫–æ–¥–µ–∫—Å", "–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å"]
            ),
            (
                "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –ø—Ä–∞–≤–∞ –∫–∞–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞?",
                ["—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–ø—Ä–∞–≤–∞", "–∏–º—É—â–µ—Å—Ç–≤–æ"]
            ),
            (
                "–ö–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä?",
                ["–¥–æ–≥–æ–≤–æ—Ä", "—Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"]
            ),
            (
                "–ß—Ç–æ —Ç–∞–∫–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ?",
                ["–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ", "–¥–æ–ª–∂–Ω–∏–∫", "–∫—Ä–µ–¥–∏—Ç–æ—Ä"]
            )
        ]
        
        for query, expected_keywords in test_cases:
            print(f"\n‚ùì Testing query: {query}")
            
            try:
                # Simulate query processing
                result = await self._simulate_query_processing(query)
                
                if result is None or len(result) < 50:
                    print(f"   ‚ùå Query failed: No meaningful response")
                    self.test_results.append({
                        'test': f'Query: {query}',
                        'status': 'FAIL',
                        'message': 'No meaningful response'
                    })
                    continue
                
                # Check if result contains expected keywords
                found_keywords = []
                for keyword in expected_keywords:
                    if keyword.lower() in result.lower():
                        found_keywords.append(keyword)
                
                if len(found_keywords) >= len(expected_keywords) * 0.3:  # At least 30% of keywords
                    print(f"   ‚úÖ Query processed: CORRECT")
                    print(f"   üìù Found keywords: {found_keywords}")
                    self.test_results.append({
                        'test': f'Query: {query}',
                        'status': 'PASS',
                        'message': f'Found {len(found_keywords)}/{len(expected_keywords)} keywords',
                        'found_keywords': found_keywords
                    })
                else:
                    print(f"   ‚ùå Query processed: INSUFFICIENT KEYWORDS")
                    print(f"   üìù Found: {found_keywords}")
                    print(f"   üìù Expected: {expected_keywords}")
                    self.test_results.append({
                        'test': f'Query: {query}',
                        'status': 'FAIL',
                        'message': f'Only found {len(found_keywords)}/{len(expected_keywords)} keywords',
                        'found_keywords': found_keywords,
                        'expected_keywords': expected_keywords
                    })
                
                # Show preview
                print(f"   üìÑ Preview: {result[:150]}...")
                
            except Exception as e:
                print(f"   üö® Query error: {str(e)}")
                self.test_results.append({
                    'test': f'Query: {query}',
                    'status': 'ERROR',
                    'message': f'Exception: {str(e)}'
                })
    
    async def test_edge_cases(self):
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        """
        print("\nüîç Testing edge cases...")
        
        edge_cases = [
            {
                'name': 'Non-existent article',
                'query': '/law 99999',
                'expected_behavior': 'should_return_error'
            },
            {
                'name': 'Invalid article number',
                'query': '/law abc',
                'expected_behavior': 'should_return_error'
            },
            {
                'name': 'Non-legal question',
                'query': '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è?',
                'expected_behavior': 'should_reject_non_legal'
            },
            {
                'name': 'Empty query',
                'query': '',
                'expected_behavior': 'should_handle_gracefully'
            }
        ]
        
        for case in edge_cases:
            print(f"\nüîç Testing: {case['name']}")
            
            try:
                if case['query'].startswith('/law'):
                    result = await self._simulate_law_command(case['query'].split()[1])
                else:
                    result = await self._simulate_query_processing(case['query'])
                
                # Validate based on expected behavior
                success = self._validate_edge_case(result, case)
                
                if success:
                    print(f"   ‚úÖ {case['name']}: CORRECT")
                    self.test_results.append({
                        'test': case['name'],
                        'status': 'PASS',
                        'message': 'Handled correctly'
                    })
                else:
                    print(f"   ‚ùå {case['name']}: INCORRECT")
                    self.test_results.append({
                        'test': case['name'],
                        'status': 'FAIL',
                        'message': 'Not handled correctly'
                    })
                
                print(f"   üìÑ Response: {result[:100] if result else 'None'}...")
                
            except Exception as e:
                print(f"   üö® {case['name']}: ERROR - {str(e)}")
                self.test_results.append({
                    'test': case['name'],
                    'status': 'ERROR',
                    'message': f'Exception: {str(e)}'
                })
    
    async def _simulate_law_command(self, article_num):
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É /law
        """
        try:
            # This would normally call the orchestrator
            # For now, we'll simulate by reading from the data file
            data_file = os.path.join(os.path.dirname(__file__), '..', 'data', 'civil_code_chunks.txt')
            
            if not os.path.exists(data_file):
                return None
            
            with open(data_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Find the article
            lines = content.split('\n')
            for line in lines:
                if line.strip().startswith(f"–°—Ç–∞—Ç—å—è {article_num}:"):
                    return line
            
            return None
            
        except Exception as e:
            logger.error(f"Error simulating law command: {e}")
            return None
    
    async def _simulate_query_processing(self, query):
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        """
        try:
            # This would normally call the full pipeline
            # For now, we'll return a simple response
            if not query or len(query.strip()) < 3:
                return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å."
            
            if "–ø–æ–≥–æ–¥–∞" in query.lower() or "–ø–æ–≥–æ–¥–∞" in query.lower():
                return "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –ø—Ä–∞–≤—É –ö–†. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —Å–ª—É–∂–±–µ."
            
            return f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{query}'. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
            
        except Exception as e:
            logger.error(f"Error simulating query processing: {e}")
            return None
    
    def _validate_edge_case(self, result, case):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π
        """
        if case['expected_behavior'] == 'should_return_error':
            return result is None or '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞' in result.lower() or '–æ—à–∏–±–∫–∞' in result.lower()
        elif case['expected_behavior'] == 'should_handle_gracefully':
            return result is not None and len(result) > 0
        elif case['expected_behavior'] == 'should_reject_non_legal':
            return '–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –ø—Ä–∞–≤—É' in result.lower()
        
        return True
    
    def run_comprehensive_test(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
        """
        print("üöÄ Starting Comprehensive Bot Integration Test")
        print("="*60)
        
        self.start_time = datetime.now()
        
        # Run all tests
        asyncio.run(self.test_article_commands())
        asyncio.run(self.test_legal_queries())
        asyncio.run(self.test_edge_cases())
        
        # Calculate summary
        total_tests = len(self.test_results)
        passed = sum(1 for r in self.test_results if r['status'] == 'PASS')
        failed = sum(1 for r in self.test_results if r['status'] == 'FAIL')
        errors = sum(1 for r in self.test_results if r['status'] == 'ERROR')
        not_found = sum(1 for r in self.test_results if r['status'] == 'NOT_FOUND')
        
        success_rate = (passed / total_tests * 100) if total_tests > 0 else 0
        
        end_time = datetime.now()
        duration = (end_time - self.start_time).total_seconds()
        
        # Print summary
        print("\n" + "="*60)
        print("üìä INTEGRATION TEST SUMMARY")
        print("="*60)
        print(f"Total Tests: {total_tests}")
        print(f"‚úÖ Passed: {passed}")
        print(f"‚ùå Failed: {failed}")
        print(f"üö® Errors: {errors}")
        print(f"üö´ Not Found: {not_found}")
        print(f"üìà Success Rate: {success_rate:.1f}%")
        print(f"‚è±Ô∏è  Duration: {duration:.2f} seconds")
        
        if success_rate >= 90:
            print("üéâ EXCELLENT! Bot integration is working correctly!")
        elif success_rate >= 70:
            print("‚ö†Ô∏è  GOOD, but some issues remain.")
        else:
            print("üö® POOR! Significant issues with bot integration.")
        
        return {
            'total_tests': total_tests,
            'passed': passed,
            'failed': failed,
            'errors': errors,
            'not_found': not_found,
            'success_rate': success_rate,
            'duration': duration,
            'results': self.test_results
        }


def main():
    """
    Main function
    """
    tester = BotIntegrationTester()
    results = tester.run_comprehensive_test()
    
    print(f"\nüìÅ Test completed! Check results above.")
    return results


if __name__ == "__main__":
    main()
