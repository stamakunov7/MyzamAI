"""
User Interface Agent - Formats responses for Telegram interface
"""

import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class UserInterfaceAgent:
    """
    Agent that formats legal responses for optimal user experience in Telegram
    """
    
    def __init__(self):
        """
        Initialize User Interface Agent
        """
        logger.info("User Interface Agent initialized")
    
    def format_response(self, 
                       query: str,
                       legal_interpretation: str,
                       source_articles: list = None,
                       include_disclaimer: bool = True) -> str:
        """
        Format the complete response for Telegram
        
        Args:
            query: Original user query
            legal_interpretation: Legal expert's interpretation
            source_articles: List of source article references
            include_disclaimer: Whether to include legal disclaimer
            
        Returns:
            Formatted message for Telegram
        """
        logger.info("Formatting response for user...")
        
        # Build the response
        response_parts = []
        
        # Header with emoji
        response_parts.append("‚öñÔ∏è **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è**\n")
        
        # Question recap
        response_parts.append(f"**–í–∞—à –≤–æ–ø—Ä–æ—Å:**\n_{query}_\n")
        
        # Main interpretation
        response_parts.append(f"**–û—Ç–≤–µ—Ç:**\n{legal_interpretation}\n")
        
        # Source references
        if source_articles and len(source_articles) > 0:
            response_parts.append("\nüìö **–ü—Ä–∞–≤–æ–≤–∞—è –æ—Å–Ω–æ–≤–∞:**")
            for i, article in enumerate(source_articles[:3], 1):
                # Extract article number if present
                article_preview = article[:150] + "..." if len(article) > 150 else article
                response_parts.append(f"{i}. {article_preview}")
            response_parts.append("")
        
        # Practical tips
        response_parts.append("üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
        tips = self._generate_tips(query, legal_interpretation)
        response_parts.append(tips)
        
        # Legal disclaimer
        if include_disclaimer:
            response_parts.append("\n‚ö†Ô∏è _–î–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —é—Ä–∏—Å—Ç—É._")
        
        # Footer
        response_parts.append(f"\nü§ñ LegalBot+ | {datetime.now().strftime('%d.%m.%Y %H:%M')}")
        
        formatted_response = "\n".join(response_parts)
        
        # Ensure Telegram message length limit (4096 characters)
        if len(formatted_response) > 4000:
            formatted_response = formatted_response[:3900] + "\n\n... [—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω]\n\n" + response_parts[-2] + "\n" + response_parts[-1]
        
        logger.info("‚úì Response formatted successfully")
        return formatted_response
    
    def _generate_tips(self, query: str, interpretation: str) -> str:
        """
        Generate practical tips based on query context
        
        Args:
            query: User query
            interpretation: Legal interpretation
            
        Returns:
            Practical tips text
        """
        query_lower = query.lower()
        
        # Context-aware tips
        if '–≤–æ–∑–≤—Ä–∞—Ç' in query_lower or '–≤–µ—Ä–Ω—É—Ç—å' in query_lower:
            return "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –ø–æ–∫—É–ø–∫–µ\n‚Ä¢ –¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞–¥–ª–µ–∂–∞—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏\n‚Ä¢ –°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç —á–µ–∫–∞"
        
        elif '–¥–æ–≥–æ–≤–æ—Ä' in query_lower:
            return "‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–µ–π –∏ –ø–µ—á–∞—Ç–µ–π\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        
        elif '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ' in query_lower or '–Ω–∞—Å–ª–µ–¥–Ω–∏–∫' in query_lower:
            return "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤\n‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Ä–æ–¥—Å—Ç–≤–æ\n‚Ä¢ –£–∑–Ω–∞–π—Ç–µ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–ª–≥–∞—Ö –Ω–∞—Å–ª–µ–¥–æ–¥–∞—Ç–µ–ª—è"
        
        elif '—Ä–∞–±–æ—Ç' in query_lower or '—Ç—Ä—É–¥–æ–≤' in query_lower:
            return "‚Ä¢ –¢—Ä–µ–±—É–π—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞\n‚Ä¢ –ó–Ω–∞–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–∞–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π"
        
        elif '–∞—Ä–µ–Ω–¥' in query_lower:
            return "‚Ä¢ –ó–∞–∫–ª—é—á–∏—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã\n‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ\n‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Å—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç—ã"
        
        else:
            return "‚Ä¢ –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —é—Ä–∏—Å—Ç–æ–º\n‚Ä¢ –°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–µ–ª—É –¥–æ–∫—É–º–µ–Ω—Ç—ã\n‚Ä¢ –î–µ–π—Å—Ç–≤—É–π—Ç–µ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º —Å—Ä–æ–∫–∏"
    
    def format_error(self, error_message: str) -> str:
        """
        Format error message for user
        
        Args:
            error_message: Error description
            
        Returns:
            User-friendly error message
        """
        return f"""‚ùå **–û—à–∏–±–∫–∞**

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

**–î–µ—Ç–∞–ª–∏:** {error_message}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.

ü§ñ LegalBot+"""
    
    def format_welcome(self) -> str:
        """
        Format welcome message
        
        Returns:
            Welcome message
        """
        return """üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LegalBot+**

–Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –ø—Ä–∞–≤—É –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏.

**–ß—Ç–æ —è —É–º–µ—é:**
‚öñÔ∏è –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
üìö –ù–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–∞
üí° –î–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
üîÑ –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
_"–ú–æ–≥—É –ª–∏ —è –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ —á–µ–∫–∞?"_

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —Å–ø—Ä–∞–≤–∫–∞
/law <–Ω–æ–º–µ—Ä> - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é

‚ö†Ô∏è –ü–æ–º–Ω–∏—Ç–µ: –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ –∑–∞–º–µ–Ω—è—é—â—É—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.

ü§ñ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!"""
    
    def format_help(self) -> str:
        """
        Format help message
        
        Returns:
            Help message
        """
        return """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é LegalBot+**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/law <–Ω–æ–º–µ—Ä> - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏

**–ö–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã:**
‚úÖ –•–æ—Ä–æ—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞?"
‚Ä¢ "–ú–æ–∂–Ω–æ –ª–∏ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –¥–æ—Å—Ä–æ—á–Ω–æ?"
‚Ä¢ "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ?"

‚ùå –ü–ª–æ—Ö–∏–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ "–ü–æ–º–æ–≥–∏" (—Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π)
‚Ä¢ "!!!" (–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)

**–Ø–∑—ã–∫–∏:**
–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫–∏.

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –∫–æ–¥–µ–∫—Å–µ –ö–†
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä
‚Ä¢ –ù–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —é—Ä–∏—Å—Ç–∞

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º: @support

ü§ñ LegalBot+ v1.0"""


def main():
    """
    Test the User Interface Agent
    """
    agent = UserInterfaceAgent()
    
    query = "–ú–æ–≥—É –ª–∏ —è –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ —á–µ–∫–∞?"
    interpretation = "–°–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç—å–µ 22 –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –ö–†, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞—Å—Å–æ–≤–æ–≥–æ —á–µ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–∫–∞–∑–∞ –≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
    sources = ["–°—Ç–∞—Ç—å—è 22. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞—Å—Å–æ–≤–æ–≥–æ –∏–ª–∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞..."]
    
    print("=" * 60)
    print("Formatted Response:")
    print("=" * 60)
    print(agent.format_response(query, interpretation, sources))
    
    print("\n" + "=" * 60)
    print("Welcome Message:")
    print("=" * 60)
    print(agent.format_welcome())


if __name__ == "__main__":
    main()

