"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç retrieval accuracy –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ
"""

import os
import sys
import re
import json
from datetime import datetime
from typing import List, Dict, Optional

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)


class FullRetrievalAccuracyTester:
    """
    –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä accuracy –¥–ª—è –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
    
    –≠—Ç–æ—Ç —Ç–µ—Å—Ç–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –†–ï–ê–õ–¨–ù–£–Æ —Ä–∞–±–æ—Ç—É get_article_by_number,
    –∏—Å–ø–æ–ª—å–∑—É—è —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ —Ä–µ–∞–ª—å–Ω—ã–π –±–æ—Ç.
    """
    
    def __init__(self, data_file_path: str, index_dir: Optional[str] = None):
        """
        Initialize tester
        
        Args:
            data_file_path: Path to civil_code_full.txt
            index_dir: Optional path to FAISS index directory
        """
        self.data_file_path = data_file_path
        self.index_dir = index_dir
        self.test_results = []
        self.retriever = None
        self.orchestrator = None
        
        # Try to load orchestrator (REAL implementation)
        if index_dir and os.path.exists(os.path.join(index_dir, 'faiss_index.bin')):
            try:
                from src.bot.main import LegalBotOrchestrator
                self.orchestrator = LegalBotOrchestrator(index_dir)
                print("‚úÖ Orchestrator loaded - using REAL get_article_by_number method")
            except Exception as e:
                print(f"‚ö†Ô∏è  Could not load orchestrator: {e}")
                # Fallback to retriever only
                try:
                    from src.core.law_retriever import LawRetriever
                    self.retriever = LawRetriever(index_dir)
                    self.retriever.load()
                    print("‚úÖ FAISS index loaded successfully (fallback mode)")
                except Exception as e2:
                    print(f"‚ö†Ô∏è  Could not load FAISS index: {e2}")
                    print("   Will test using file-based method only")
    
    def find_all_articles(self) -> List[int]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç–∞—Ç–µ–π
        """
        print("üîç Scanning database for all articles...")
        
        with open(self.data_file_path, 'r', encoding='utf-8') as f:
            text = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π
        article_pattern = re.compile(r'–°—Ç–∞—Ç—å—è\s+(\d+)')
        all_matches = article_pattern.findall(text)
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        unique_articles = set()
        for match in all_matches:
            num = int(match)
            if 1 <= num <= 2000:  # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞
                unique_articles.add(num)
        
        sorted_articles = sorted(unique_articles)
        print(f"   Found {len(sorted_articles)} unique articles")
        print(f"   Range: {sorted_articles[0]} - {sorted_articles[-1]}")
        
        return sorted_articles
    
    def test_article_via_retriever(self, article_num: int) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ REAL get_article_by_number method
        
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–ß–ù–£–Æ –ª–æ–≥–∏–∫—É –∏–∑ main.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        
        Args:
            article_num: –ù–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        """
        if not self.retriever:
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–£–Æ –ª–æ–≥–∏–∫—É –∏–∑ orchestrator.get_article_by_number
            # –≠—Ç–æ —Ç–æ—á–Ω–∞—è –∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ main.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            chunks = self.retriever.chunks or []
            
            # STRICT matching - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ get_article_by_number
            article_parts = []
            for chunk in chunks:
                chunk_clean = chunk.strip()
                # STRICT: Must start with exact "–°—Ç–∞—Ç—å—è {article_num}" pattern
                if chunk_clean.startswith(f"–°—Ç–∞—Ç—å—è {article_num}"):
                    # Additional validation: ensure it's not a partial match
                    # Check that the next character after the number is not a digit
                    pattern = f"–°—Ç–∞—Ç—å—è {article_num}"
                    if len(chunk_clean) > len(pattern):
                        next_char = chunk_clean[len(pattern)]
                        if next_char.isdigit():
                            # This is a partial match (e.g., "–°—Ç–∞—Ç—å—è 37" matches "–°—Ç–∞—Ç—å—è 379")
                            continue
                    article_parts.append(chunk_clean)
            
            if article_parts:
                # Final validation: ensure the result starts with the correct article
                # (simulating _combine_article_parts logic - use first part)
                full_article = article_parts[0]  # Simplified for testing
                if full_article.strip().startswith(f"–°—Ç–∞—Ç—å—è {article_num}"):
                    return {
                        'status': 'PASS',
                        'found': True,
                        'method': 'retriever_real',
                        'parts_count': len(article_parts),
                        'article_preview': full_article[:100] + '...' if len(full_article) > 100 else full_article
                    }
                else:
                    return {
                        'status': 'PARTIAL',
                        'found': True,
                        'method': 'retriever_real',
                        'issue': 'Validation failed - wrong article number in result',
                        'article_preview': full_article[:100] + '...' if len(full_article) > 100 else full_article
                    }
            else:
                # If not found in chunks, try FAISS search (simulating fallback)
                # This is the fallback logic from get_article_by_number
                try:
                    results = self.retriever.search(f"–°—Ç–∞—Ç—å—è {article_num}", top_k=20)
                    for chunk, score in results:
                        chunk_clean = chunk.strip()
                        if chunk_clean.startswith(f"–°—Ç–∞—Ç—å—è {article_num}"):
                            pattern = f"–°—Ç–∞—Ç—å—è {article_num}"
                            if len(chunk_clean) > len(pattern):
                                next_char = chunk_clean[len(pattern)]
                                if next_char.isdigit():
                                    continue
                            if chunk_clean.startswith(f"–°—Ç–∞—Ç—å—è {article_num}"):
                                return {
                                    'status': 'PASS',
                                    'found': True,
                                    'method': 'retriever_faiss_fallback',
                                    'score': float(score),
                                    'article_preview': chunk_clean[:100] + '...' if len(chunk_clean) > 100 else chunk_clean
                                }
                except Exception as e:
                    pass  # Fallback failed, continue to NOT_FOUND
                
                return {
                    'status': 'NOT_FOUND',
                    'found': False,
                    'method': 'retriever_real',
                    'note': 'Article not found in chunks and FAISS fallback also failed'
                }
                
        except Exception as e:
            return {
                'status': 'ERROR',
                'found': False,
                'method': 'retriever_real',
                'error': str(e)
            }
    
    def test_article_via_file(self, article_num: int) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ —Ñ–∞–π–ª–µ
        
        Args:
            article_num: –ù–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        """
        try:
            with open(self.data_file_path, 'r', encoding='utf-8') as f:
                text = f.read()
            
            # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ "–°—Ç–∞—Ç—å—è {num}" –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
            pattern = rf'^–°—Ç–∞—Ç—å—è\s+{article_num}\b'
            matches = re.findall(pattern, text, re.MULTILINE)
            
            if matches:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å–ª–µ–¥—É—é—â–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞
                # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ –Ω–µ –∏–¥–µ—Ç –µ—â–µ —Ü–∏—Ñ—Ä–∞
                full_pattern = rf'–°—Ç–∞—Ç—å—è\s+{article_num}([^\d]|$)'
                full_matches = re.findall(full_pattern, text, re.MULTILINE)
                
                if full_matches:
                    return {
                        'status': 'PASS',
                        'found': True,
                        'method': 'file',
                        'matches': len(full_matches)
                    }
                else:
                    return {
                        'status': 'PARTIAL',
                        'found': True,
                        'method': 'file',
                        'issue': 'Possible partial match'
                    }
            else:
                return {
                    'status': 'NOT_FOUND',
                    'found': False,
                    'method': 'file'
                }
                
        except Exception as e:
            return {
                'status': 'ERROR',
                'found': False,
                'method': 'file',
                'error': str(e)
            }
    
    def test_article_via_orchestrator(self, article_num: int) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ –†–ï–ê–õ–¨–ù–´–ô orchestrator.get_article_by_number
        
        –≠—Ç–æ —Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π —Ç–µ—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–ß–ù–û —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –±–æ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        
        Args:
            article_num: –ù–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        """
        if not self.orchestrator:
            return None
        
        try:
            # –†–ï–ê–õ–¨–ù–´–ô –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –∏–∑ production –∫–æ–¥–∞
            article_text = self.orchestrator.get_article_by_number(article_num)
            
            if article_text is None:
                return {
                    'status': 'NOT_FOUND',
                    'found': False,
                    'method': 'orchestrator_real'
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
            article_text_clean = article_text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è: —Å—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            if article_text_clean.startswith(f"–°—Ç–∞—Ç—å—è {article_num}"):
                # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                # –ú–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ (—á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ "–°—Ç–∞—Ç—å—è N" –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                min_content_length = 50
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç–∞—Ç—å–∏
                pattern_variants = [
                    f"–°—Ç–∞—Ç—å—è {article_num} ",
                    f"–°—Ç–∞—Ç—å—è {article_num}:",
                    f"–°—Ç–∞—Ç—å—è {article_num}.",
                    f"–°—Ç–∞—Ç—å—è {article_num}"
                ]
                
                content_length = 0
                for pattern in pattern_variants:
                    if article_text_clean.startswith(pattern):
                        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
                        content_after_pattern = article_text_clean[len(pattern):].strip()
                        content_length = len(content_after_pattern)
                        break
                
                if content_length >= min_content_length:
                    return {
                        'status': 'PASS',
                        'found': True,
                        'method': 'orchestrator_real',
                        'article_length': len(article_text),
                        'content_length': content_length,
                        'article_preview': article_text[:150] + '...' if len(article_text) > 150 else article_text
                    }
                else:
                    return {
                        'status': 'PARTIAL',
                        'found': True,
                        'method': 'orchestrator_real',
                        'issue': f'Article found but content too short: {content_length} chars (min: {min_content_length})',
                        'article_length': len(article_text),
                        'content_length': content_length,
                        'article_preview': article_text
                    }
            else:
                # –°—Ç–∞—Ç—å—è –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
                match = re.search(r'–°—Ç–∞—Ç—å—è\s+(\d+)', article_text_clean)
                actual_num = match.group(1) if match else "Unknown"
                return {
                    'status': 'FAIL',
                    'found': False,
                    'method': 'orchestrator_real',
                    'issue': f'Wrong article returned: expected {article_num}, got {actual_num}',
                    'article_preview': article_text[:150] + '...' if len(article_text) > 150 else article_text
                }
                
        except Exception as e:
            return {
                'status': 'ERROR',
                'found': False,
                'method': 'orchestrator_real',
                'error': str(e)
            }
    
    def test_article(self, article_num: int) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        
        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
        1. orchestrator.get_article_by_number (—Ä–µ–∞–ª—å–Ω—ã–π production –º–µ—Ç–æ–¥) - –°–ê–ú–´–ô –¢–û–ß–ù–´–ô
        2. retriever (–∏–º–∏—Ç–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏)
        3. file (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è)
        
        Args:
            article_num: –ù–æ–º–µ—Ä —Å—Ç–∞—Ç—å–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        """
        result = {
            'article': article_num,
            'results': {}
        }
        
        # –ü–†–ò–û–†–ò–¢–ï–¢ 1: –¢–µ—Å—Ç —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π orchestrator (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π)
        if self.orchestrator:
            orchestrator_result = self.test_article_via_orchestrator(article_num)
            result['results']['orchestrator'] = orchestrator_result
            primary_result = orchestrator_result
        # –ü–†–ò–û–†–ò–¢–ï–¢ 2: –¢–µ—Å—Ç —á–µ—Ä–µ–∑ retriever (–µ—Å–ª–∏ orchestrator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        elif self.retriever:
            retriever_result = self.test_article_via_retriever(article_num)
            result['results']['retriever'] = retriever_result
            primary_result = retriever_result
        # –ü–†–ò–û–†–ò–¢–ï–¢ 3: –¢–µ—Å—Ç —á–µ—Ä–µ–∑ —Ñ–∞–π–ª (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        else:
            file_result = self.test_article_via_file(article_num)
            result['results']['file'] = file_result
            primary_result = file_result
        
        result['status'] = primary_result['status'] if primary_result else 'ERROR'
        result['found'] = primary_result.get('found', False) if primary_result else False
        
        return result
    
    def run_full_test(self, article_numbers: Optional[List[int]] = None, sample: bool = False):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
        
        Args:
            article_numbers: –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ None - –≤—Å–µ)
            sample: –ï—Å–ª–∏ True, —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é 10-—é —Å—Ç–∞—Ç—å—é –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        """
        print("\n" + "="*60)
        print("üöÄ FULL RETRIEVAL ACCURACY TEST")
        print("="*60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
        if article_numbers is None:
            all_articles = self.find_all_articles()
            if sample:
                test_articles = all_articles[::10]  # –ö–∞–∂–¥–∞—è 10-—è —Å—Ç–∞—Ç—å—è
                print(f"\nüìä Testing sample: {len(test_articles)} articles (every 10th)")
            else:
                test_articles = all_articles
                print(f"\nüìä Testing ALL {len(test_articles)} articles")
        else:
            test_articles = article_numbers
            print(f"\nüìä Testing {len(test_articles)} specified articles")
        
        print(f"   This may take several minutes...\n")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞—Ç—å—é
        total = len(test_articles)
        for i, article_num in enumerate(test_articles, 1):
            if i % 50 == 0 or i == 1 or i == total:
                print(f"Progress: {i}/{total} ({i/total*100:.1f}%) - Testing Article {article_num}...")
            
            result = self.test_article(article_num)
            self.test_results.append(result)
        
        print(f"\n‚úÖ Testing completed: {total} articles")
        
        return self.calculate_summary()
    
    def calculate_summary(self) -> Dict:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total = len(self.test_results)
        passed = sum(1 for r in self.test_results if r['status'] == 'PASS')
        partial = sum(1 for r in self.test_results if r['status'] == 'PARTIAL')
        not_found = sum(1 for r in self.test_results if r['status'] == 'NOT_FOUND')
        errors = sum(1 for r in self.test_results if r['status'] == 'ERROR')
        
        accuracy = (passed / total * 100) if total > 0 else 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_method = "Unknown"
        if self.orchestrator:
            test_method = "orchestrator.get_article_by_number (REAL production method)"
        elif self.retriever:
            test_method = "retriever chunks search (simulated logic)"
        else:
            test_method = "file pattern matching (basic check)"
        
        summary = {
            'total_tests': total,
            'passed': passed,
            'partial': partial,
            'not_found': not_found,
            'errors': errors,
            'accuracy': accuracy,
            'timestamp': datetime.now().isoformat(),
            'test_method': test_method,
            'test_description': self._get_test_description(),
            'results': self.test_results
        }
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*60)
        print("üìä RETRIEVAL ACCURACY SUMMARY")
        print("="*60)
        print(f"\nüî¨ TEST METHOD: {test_method}")
        print(f"   {self._get_test_description()}")
        print(f"\nüìà TEST RESULTS:")
        print(f"Total Articles Tested: {total}")
        print(f"‚úÖ Passed (Correctly Retrieved): {passed} ({passed/total*100:.1f}%)")
        print(f"‚ö†Ô∏è  Partial Matches: {partial} ({partial/total*100:.1f}%)")
        print(f"üö´ Not Found: {not_found} ({not_found/total*100:.1f}%)")
        print(f"‚ùå Errors: {errors} ({errors/total*100:.1f}%)")
        print(f"\nüéØ RETRIEVAL ACCURACY: {accuracy:.1f}%")
        print("="*60)
        
        if accuracy >= 90:
            print("üéâ EXCELLENT! Retrieval accuracy is very high!")
        elif accuracy >= 80:
            print("‚úÖ GOOD! Retrieval accuracy is acceptable.")
        elif accuracy >= 70:
            print("‚ö†Ô∏è  MODERATE. Some improvements needed.")
        else:
            print("üö® LOW. Significant issues with retrieval.")
        
        return summary
    
    def _get_test_description(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        """
        if self.orchestrator:
            return (
                "Tests use the REAL production method LegalBotOrchestrator.get_article_by_number() "
                "which is the exact same code used in production. For each article number, we call "
                "get_article_by_number() and validate that: (1) method returns non-None result, "
                "(2) returned text starts with correct article number '–°—Ç–∞—Ç—å—è {N}', "
                "(3) returned text has substantial content. This is the most accurate test as it "
                "simulates real user requests to the bot."
            )
        elif self.retriever:
            return (
                "Tests simulate the get_article_by_number logic by searching chunks directly. "
                "For each article, we search chunks for exact match starting with '–°—Ç–∞—Ç—å—è {N}' "
                "with validation to prevent partial matches (e.g., article 37 matching article 379). "
                "This is less accurate than orchestrator method but validates chunk structure."
            )
        else:
            return (
                "Tests check article existence in raw text file using regex pattern matching. "
                "This is a basic validation that articles exist in the database but does not test "
                "actual retrieval functionality. Use this only if FAISS index is unavailable."
            )
    
    def save_results(self, filename: Optional[str] = None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        """
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"full_retrieval_accuracy_{timestamp}.json"
        
        output_dir = os.path.join(project_root, 'storage')
        os.makedirs(output_dir, exist_ok=True)
        filepath = os.path.join(output_dir, filename)
        
        summary = self.calculate_summary()
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(summary, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÅ Full results saved to: {filepath}")
        return filepath


def main():
    """
    Main function
    """
    # Get paths
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(script_dir)
    
    data_file = os.path.join(project_root, 'data', 'civil_code_full.txt')
    index_dir = os.path.join(project_root, 'storage', 'faiss_index')
    
    # Check if data file exists
    if not os.path.exists(data_file):
        print(f"‚ùå Data file not found: {data_file}")
        return
    
    # Initialize tester
    print("üîß Initializing Full Retrieval Accuracy Tester...")
    tester = FullRetrievalAccuracyTester(data_file, index_dir)
    
    # Ask user for test mode
    print("\nSelect test mode:")
    print("1. Full test (all articles) - slow but complete")
    print("2. Sample test (every 10th article) - faster")
    
    try:
        choice = input("\nEnter choice (1 or 2, default=2): ").strip()
        sample_mode = (choice != '1')
    except:
        sample_mode = True  # Default to sample for safety
    
    # Run full test
    summary = tester.run_full_test(sample=sample_mode)
    
    # Save results
    tester.save_results()
    
    return summary


if __name__ == "__main__":
    main()

