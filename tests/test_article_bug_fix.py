"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç—å—è–º–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é –ø–æ –Ω–æ–º–µ—Ä—É
"""

import pytest
import asyncio
import sys
import os
import logging

# Add project root to path for imports
project_root = os.path.join(os.path.dirname(__file__), '..')
sys.path.insert(0, project_root)

from src.bot.main import LegalBotOrchestrator

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


@pytest.mark.asyncio
async def test_article_accuracy():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π
    """
    print("üîç Testing article retrieval accuracy...")
    
    # Get paths
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(script_dir)
    index_dir = os.path.join(project_root, 'storage', 'faiss_index')
    
    # Check if FAISS index exists
    if not os.path.exists(os.path.join(index_dir, 'faiss_index.bin')):
        print("‚ùå FAISS index not found! Please run scripts/build_faiss_index.py first.")
        return
    
    # Initialize orchestrator
    orchestrator = LegalBotOrchestrator(index_dir)
    
    # Test cases: (article_number, expected_start)
    test_cases = [
        (379, "–°—Ç–∞—Ç—å—è 379. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Å–º–µ—Ä—Ç—å—é –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞"),
        (380, "–°—Ç–∞—Ç—å—è 380. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–µ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞"),
        (381, "–°—Ç–∞—Ç—å—è 381. –ü–æ–Ω—è—Ç–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞"),
        (22, "–°—Ç–∞—Ç—å—è 22. –í–∏–¥—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"),
        (222, "–°—Ç–∞—Ç—å—è 222. –ü–æ–Ω—è—Ç–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"),
        (1, "–°—Ç–∞—Ç—å—è 1. –û—Ç–Ω–æ—à–µ–Ω–∏—è, —Ä–µ–≥—É–ª–∏—Ä—É–µ–º—ã–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º"),
        (2, "–°—Ç–∞—Ç—å—è 2. –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"),
        (3, "–°—Ç–∞—Ç—å—è 3. –î–µ–π—Å—Ç–≤–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
    ]
    
    passed = 0
    failed = 0
    
    print("\n" + "="*80)
    print("üìö ARTICLE ACCURACY TEST RESULTS")
    print("="*80)
    
    for article_num, expected_start in test_cases:
        print(f"\nüîç Testing Article {article_num}...")
        
        try:
            # Get article
            article_text = orchestrator.get_article_by_number(article_num)
            
            if article_text is None:
                print(f"‚ùå Article {article_num}: NOT FOUND")
                failed += 1
                continue
            
            # Check if it starts with the correct article number
            if article_text.strip().startswith(f"–°—Ç–∞—Ç—å—è {article_num}"):
                print(f"‚úÖ Article {article_num}: CORRECT")
                print(f"   Preview: {article_text[:100]}...")
                passed += 1
            else:
                # Extract actual article number
                import re
                match = re.search(r'–°—Ç–∞—Ç—å—è (\d+)', article_text)
                actual_article = match.group(1) if match else "Unknown"
                print(f"‚ùå Article {article_num}: WRONG ARTICLE RETURNED")
                print(f"   Expected: –°—Ç–∞—Ç—å—è {article_num}")
                print(f"   Got: –°—Ç–∞—Ç—å—è {actual_article}")
                print(f"   Preview: {article_text[:100]}...")
                failed += 1
        
        except Exception as e:
            print(f"üö® Article {article_num}: ERROR - {str(e)}")
            failed += 1
    
    # Summary
    total = passed + failed
    success_rate = (passed / total * 100) if total > 0 else 0
    
    print("\n" + "="*80)
    print("üìä SUMMARY")
    print("="*80)
    print(f"Total Tests: {total}")
    print(f"‚úÖ Passed: {passed}")
    print(f"‚ùå Failed: {failed}")
    print(f"üìà Success Rate: {success_rate:.1f}%")
    
    if success_rate >= 90:
        print("üéâ EXCELLENT! Article retrieval is working correctly!")
    elif success_rate >= 70:
        print("‚ö†Ô∏è  GOOD, but some issues remain. Consider further improvements.")
    else:
        print("üö® POOR! Significant issues with article retrieval.")
    
    return success_rate


def main():
    """
    Main function
    """
    print("üöÄ Starting Article Bug Fix Test...")
    
    # Run the test
    success_rate = asyncio.run(test_article_accuracy())
    
    if success_rate >= 90:
        print("\n‚úÖ Bug fix successful! Bot should now return correct articles.")
    else:
        print("\n‚ùå Bug fix needs more work. Check the implementation.")


if __name__ == "__main__":
    main()
