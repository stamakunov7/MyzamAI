name: 🧪 MyzamAI Tests

on:
  push:
    branches: [ main, develop, feature/*, hotfix/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
        test-type: ["unit", "integration"]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for better analysis
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: ⬆️ Upgrade pip
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
    
    - name: 📚 Install core dependencies
      run: |
        pip install -r requirements.txt
        echo "✅ Core dependencies installed"
    
    - name: 🧪 Install test dependencies
      run: |
        pip install -r requirements-test.txt
        echo "✅ Test dependencies installed"
    
    - name: 🔍 Verify installation
      run: |
        python --version
        pytest --version
        echo "✅ Installation verified"
    
    - name: 🔧 Set up environment variables
      run: |
        echo "TELEGRAM_BOT_TOKEN=dummy_token_for_testing" >> $GITHUB_ENV
        echo "HUGGINGFACE_API_TOKEN=dummy_token_for_testing" >> $GITHUB_ENV
        echo "✅ Environment variables set for testing"
    
    - name: 🏗️ Build FAISS index (if needed)
      run: |
        if [ ! -f "storage/faiss_index/faiss_index.bin" ]; then
          echo "⚙️ Building FAISS index..."
          python scripts/build_faiss_index.py
          echo "✅ FAISS index built"
        else
          echo "✅ FAISS index already exists"
        fi
    
    - name: 🧪 Run ${{ matrix.test-type }} tests
      run: |
        echo "🚀 Running ${{ matrix.test-type }} tests..."
        python -m pytest -m ${{ matrix.test-type }} \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml \
          --junitxml=test-results-${{ matrix.test-type }}.xml \
          --maxfail=5 \
          --disable-warnings \
          --asyncio-mode=auto \
          -v
        echo "✅ ${{ matrix.test-type }} tests completed"
    
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-py${{ matrix.python-version }}
        path: |
          test-results-*.xml
          coverage.xml
          .coverage
    
    # Coverage upload is handled in the dedicated coverage job
    
    - name: 🎯 Display summary
      if: always()
      run: |
        echo "📊 Test Summary for ${{ matrix.test-type }} tests (Python ${{ matrix.python-version }})"
        echo "✅ MyzamAI ${{ matrix.test-type }} tests completed!"
        echo "🐍 Python version: ${{ matrix.python-version }}"
        echo "🧪 Test type: ${{ matrix.test-type }}"
        echo "🏃 Runner: ${{ runner.os }}"

  coverage:
    name: 📊 Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' && needs.test.result == 'success'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: 🔧 Set up environment variables
      run: |
        echo "TELEGRAM_BOT_TOKEN=dummy_token_for_testing" >> $GITHUB_ENV
        echo "HUGGINGFACE_API_TOKEN=dummy_token_for_testing" >> $GITHUB_ENV
        echo "✅ Environment variables set for testing"
    
    - name: 📚 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: 🧪 Run all tests with coverage
      run: |
        pytest --cov=src \
          --cov-report=html \
          --cov-report=xml \
          --cov-report=term-missing \
          --junitxml=test-results.xml \
          --maxfail=1 \
          --disable-warnings \
          --asyncio-mode=auto \
          -v
    
    - name: 📊 Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: 🔧 Set up environment variables
      run: |
        echo "TELEGRAM_BOT_TOKEN=dummy_token_for_testing" >> $GITHUB_ENV
        echo "HUGGINGFACE_API_TOKEN=dummy_token_for_testing" >> $GITHUB_ENV
        echo "✅ Environment variables set for testing"
    
    - name: 📚 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: ⚡ Run performance tests
      run: |
        echo "🚀 Running performance tests..."
        pytest -m performance \
          --benchmark-only \
          --benchmark-save=performance \
          --benchmark-save-data \
          --maxfail=1 \
          --disable-warnings \
          --asyncio-mode=auto \
          -v
        echo "✅ Performance tests completed"
    
    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: .benchmarks/

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'
    
    - name: 🔧 Set up environment variables
      run: |
        echo "TELEGRAM_BOT_TOKEN=dummy_token_for_testing" >> $GITHUB_ENV
        echo "HUGGINGFACE_API_TOKEN=dummy_token_for_testing" >> $GITHUB_ENV
        echo "✅ Environment variables set for testing"
    
    - name: 📚 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: 🔒 Run security scan
      run: |
        echo "🔍 Running security scan..."
        safety check --json --output safety-report.json || true
        bandit -r . -f json -o bandit-report.json || true
        echo "✅ Security scan completed"
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: always()
    
    steps:
    - name: 📊 Test Results Summary
      run: |
        echo "🎯 MyzamAI CI/CD Results Summary"
        echo "=================================="
        echo "📅 Date: $(date)"
        echo "🔗 Repository: ${{ github.repository }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "👤 Author: ${{ github.actor }}"
        echo ""
        echo "🧪 Test Status:"
        echo "  - Unit Tests: ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}"
        echo "  - Integration Tests: ${{ needs.test.result == 'success' && '✅ PASSED' || '❌ FAILED' }}"
        echo "  - Coverage Report: ${{ needs.coverage.result == 'success' && '✅ PASSED' || '⏭️ SKIPPED' }}"
        echo ""
        echo "🎉 MyzamAI tests completed successfully!"
        echo "📊 Check the Actions tab for detailed results"
