"""
Legal Expert Agent - Interprets legal articles and provides analysis
Uses centralized Meta Llama 3 from llm_manager
"""

import logging
from core.llm_manager import llama

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class LegalExpertAgent:
    """
    Agent that interprets legal texts and provides expert analysis
    Uses shared Meta Llama 3 pipeline
    """
    
    def __init__(self):
        """
        Initialize Legal Expert Agent
        Uses centralized Llama 3 pipeline from llm_manager
        """
        self.llm = llama
        logger.info("Legal Expert Agent initialized with Meta Llama 3")
    
    def interpret(self, query: str, legal_texts: str) -> str:
        """
        Interpret legal texts in the context of user query
        
        Args:
            query: User's question
            legal_texts: Retrieved legal articles
            
        Returns:
            Expert interpretation
        """
        if self.llm is None:
            logger.error("Llama 3 model not available")
            return self._fallback_interpretation(query, legal_texts)
        
        # Ultra-strict prompt for concise legal answers
        prompt = f"""<|begin_of_text|><|start_header_id|>system<|end_header_id|>

–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π —é—Ä–∏—Å—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏.
–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º), —Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞–∫–æ–Ω—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—å–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ.
–ò—Å–ø–æ–ª—å–∑—É–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é: "–≤–∑–∞–∏–º–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å—Ç–æ—Ä–æ–Ω", "–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å", "–ø—Ä–∞–≤–æ–≤—ã–µ –æ—Å–Ω–æ–≤–∞–Ω–∏—è".

‚ùó–ü—Ä–∞–≤–∏–ª–∞:
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å
- –ù–µ –≤–∫–ª—é—á–∞–π –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
- –ù–µ –¥—É–±–ª–∏—Ä—É–π –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º—ã—Å–ª–∏
- –ù–µ –ø–∏—à–∏ ¬´–≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è¬ª ‚Äî –¥–∞–π –æ–±—â–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
- –ù–µ –≤—Å—Ç–∞–≤–ª—è–π "–í–æ–ø—Ä–æ—Å:", "–°—Ç–∞—Ç—å–∏:" –∏–ª–∏ –ª—é–±—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞
- –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é, –µ—Å–ª–∏ –æ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–∫–æ–±–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã —Ä–∞–∑–º–µ—Ç–∫–∏

üö® –í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ù–ï –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –∫–æ–¥–µ–∫—Å—É (—É–≥–æ–ª–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–æ, –Ω–∞–ª–æ–≥–∏, —Å–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ –∏ —Ç.–¥.):
–û—Ç–≤–µ—Ç: –≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –ø—Ä–∞–≤—É –ö–†. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–¥–µ–∫—Å–∞] –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
–°–æ–≤–µ—Ç: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º –ø–æ [—Ç–∏–ø –ø—Ä–∞–≤–∞]
[–ù–ï —É–∫–∞–∑—ã–≤–∞–π "–û—Å–Ω–æ–≤–∞–Ω–∏–µ" –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–Ω–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏!]

‚öôÔ∏è –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ):
–û—Ç–≤–µ—Ç: –∫—Ä–∞—Ç–∫–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
–û—Å–Ω–æ–≤–∞–Ω–∏–µ: –°—Ç–∞—Ç—å—è –Ω–æ–º–µ—Ä, –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–æ–≤–æ–π –Ω–æ—Ä–º—ã [–¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ –ì–ö –ö–†!]
–°–æ–≤–µ—Ç: –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è, –Ω–µ –±–æ–ª–µ–µ 15 —Å–ª–æ–≤

‚úÖ –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–≤–æ–ø—Ä–æ—Å –ø–æ –ì–ö):
–û—Ç–≤–µ—Ç: –¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç –¥–æ—Å—Ä–æ—á–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤–∑–∞–∏–º–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è —Å—Ç–æ—Ä–æ–Ω. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—é —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è.
–û—Å–Ω–æ–≤–∞–Ω–∏–µ: –°—Ç–∞—Ç—å—è 35 –ì–ö –ö–† —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∑–∞–∏–º–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è —Å—Ç–æ—Ä–æ–Ω
–°–æ–≤–µ—Ç: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–µ –≤ –ø–∏—Å—å–º–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ

‚úÖ –ü—Ä–∏–º–µ—Ä –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –í–ù–ï –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:
–û—Ç–≤–µ—Ç: –ö—Ä–∞–∂–∞ —è–≤–ª—è–µ—Ç—Å—è —É–≥–æ–ª–æ–≤–Ω—ã–º –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –∏ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –£–≥–æ–ª–æ–≤–Ω—ã–º –∫–æ–¥–µ–∫—Å–æ–º –ö–†, –∞ –Ω–µ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–º –∫–æ–¥–µ–∫—Å–æ–º.
–°–æ–≤–µ—Ç: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –£–≥–æ–ª–æ–≤–Ω–æ–º—É –∫–æ–¥–µ–∫—Å—É –ö–† –∏–ª–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –∞–¥–≤–æ–∫–∞—Ç–æ–º<|eot_id|><|start_header_id|>user<|end_header_id|>

–í–æ–ø—Ä–æ—Å: {query}

–°—Ç–∞—Ç—å–∏ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –ö–†:
{legal_texts}

–û—Ç–≤–µ—Ç:<|eot_id|><|start_header_id|>assistant<|end_header_id|>

"""
        
        try:
            logger.info("Generating legal interpretation with Meta Llama 3...")
            response = self.llm(prompt)
            
            # Extract generated text
            result = response[0]["generated_text"]
            
            # Extract only the assistant's response
            if "<|start_header_id|>assistant<|end_header_id|>" in result:
                answer = result.split("<|start_header_id|>assistant<|end_header_id|>")[-1].strip()
            else:
                answer = result.split(prompt)[-1].strip()
            
            # Clean up any remaining tags
            answer = answer.replace("<|eot_id|>", "").strip()
            
            logger.info("‚úì Interpretation generated")
            return answer
            
        except Exception as e:
            logger.error(f"Error in interpretation: {e}")
            return self._fallback_interpretation(query, legal_texts)
    
    def _fallback_interpretation(self, query: str, legal_texts: str) -> str:
        """
        Simple rule-based fallback if LLM fails
        
        Args:
            query: User query
            legal_texts: Legal texts
            
        Returns:
            Basic interpretation
        """
        return f"""–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞:

{legal_texts}

–≠—Ç–∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è –∑–∞–∫–æ–Ω–∞ –ø—Ä–∏–º–µ–Ω–∏–º—ã –∫ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É: "{query}"

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."""


def main():
    """
    Test the Legal Expert Agent with Meta Llama 3
    """
    agent = LegalExpertAgent()
    
    query = "–ú–æ–≥—É –ª–∏ —è –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ —á–µ–∫–∞?"
    legal_text = """–°—Ç–∞—Ç—å—è 22. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞—Å—Å–æ–≤–æ–≥–æ –∏–ª–∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞
–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∫–∞—Å—Å–æ–≤–æ–≥–æ –∏–ª–∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞ –ª–∏–±–æ –∏–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏—Ö —Ñ–∞–∫—Ç –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–∫–∞–∑–∞ –≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–∏ –µ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π."""
    
    result = agent.interpret(query, legal_text)
    print("=" * 60)
    print("Legal Expert Response (Meta Llama 3):")
    print("=" * 60)
    print(result)


if __name__ == "__main__":
    main()

