"""
User Interface Agent - Formats responses for Telegram interface
"""

import logging
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class UserInterfaceAgent:
    """
    Agent that formats legal responses for optimal user experience in Telegram
    """
    
    def __init__(self):
        """
        Initialize User Interface Agent
        """
        logger.info("User Interface Agent initialized")
    
    def format_response(self, 
                       query: str,
                       legal_interpretation: str,
                       source_articles: list = None,
                       include_disclaimer: bool = True) -> str:
        """
        Format the complete response for Telegram
        
        Args:
            query: Original user query
            legal_interpretation: Legal expert's interpretation
            source_articles: List of source article references
            include_disclaimer: Whether to include legal disclaimer
            
        Returns:
            Formatted message for Telegram
        """
        logger.info("Formatting response for user...")
        
        # Parse the legal interpretation to extract structured parts
        # Expected format: "–û—Ç–≤–µ—Ç: ... –û—Å–Ω–æ–≤–∞–Ω–∏–µ: ... –°–æ–≤–µ—Ç: ..."
        
        # Create clean formatted response for Telegram with bold/italic
        response_parts = []
        
        # Check if this is out-of-scope question (not civil law)
        is_out_of_scope = any(keyword in legal_interpretation.lower() for keyword in [
            "—É–≥–æ–ª–æ–≤–Ω", "–Ω–∞–ª–æ–≥", "—Å–µ–º–µ–π–Ω", "–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –ø—Ä–∞–≤—É",
            "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫", "–∫–æ–¥–µ–∫—Å", "–≤–Ω–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏"
        ])
        
        # Header with emoji (bold) - Notion AI style
        if is_out_of_scope:
            response_parts.append("‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n")
        else:
            response_parts.append("‚öñÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–∞–≤–æ–≤–æ–π –æ—Ç–≤–µ—Ç**\n")
        
        # Add separator line
        response_parts.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n")
        
        # Check if the interpretation already has structure
        if "–û—Ç–≤–µ—Ç:" in legal_interpretation:
            # Parse structured response and format beautifully
            lines = legal_interpretation.split('\n')
            formatted_lines = []
            
            for line in lines:
                line = line.strip()
                if line.startswith("–û—Ç–≤–µ—Ç:"):
                    # Clean up the answer text
                    answer_text = line.replace("–û—Ç–≤–µ—Ç:", "").strip()
                    formatted_lines.append("‚úÖ **–û—Ç–≤–µ—Ç:**")
                    formatted_lines.append(answer_text)
                    formatted_lines.append("")  # Empty line
                elif line.startswith("–û—Å–Ω–æ–≤–∞–Ω–∏–µ:"):
                    # Clean up the foundation text
                    foundation_text = line.replace("–û—Å–Ω–æ–≤–∞–Ω–∏–µ:", "").strip()
                    formatted_lines.append("üìö **–û—Å–Ω–æ–≤–∞–Ω–∏–µ:**")
                    formatted_lines.append(f"_{foundation_text}_")
                    formatted_lines.append("")  # Empty line
                elif line.startswith("–°–æ–≤–µ—Ç:"):
                    # Clean up the advice text and capitalize first letter
                    advice_text = line.replace("–°–æ–≤–µ—Ç:", "").strip()
                    # Capitalize first letter
                    if advice_text:
                        advice_text = advice_text[0].upper() + advice_text[1:]
                    formatted_lines.append("üí° **–°–æ–≤–µ—Ç:**")
                    formatted_lines.append(advice_text)
                elif line and not line.startswith("–û—Ç–≤–µ—Ç:") and not line.startswith("–û—Å–Ω–æ–≤–∞–Ω–∏–µ:") and not line.startswith("–°–æ–≤–µ—Ç:"):
                    # Additional text that doesn't fit the structure
                    formatted_lines.append(line)
            
            response_parts.append("\n".join(formatted_lines))
        else:
            # Not structured, add basic formatting
            response_parts.append(f"**–û—Ç–≤–µ—Ç:**\n{legal_interpretation}\n")
            
            # Add source if provided
            if source_articles and len(source_articles) > 0:
                response_parts.append(f"\nüìö **–û—Å–Ω–æ–≤–∞–Ω–∏–µ:**\n_{source_articles[0][:200]}_")
        
        # Add bottom separator
        response_parts.append("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        
        # Legal disclaimer (italic) - Notion AI style
        if include_disclaimer:
            response_parts.append("\n‚ö†Ô∏è _–û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π._")
        
        # Footer with timestamp
        timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
        response_parts.append(f"\nü§ñ *MyzamAI | {timestamp}*")
        
        formatted_response = "\n".join(response_parts)
        
        # Ensure Telegram message length limit (4096 characters)
        if len(formatted_response) > 4000:
            formatted_response = formatted_response[:3900] + "\n\n‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª—è—Ö –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.\n\nü§ñ MyzamAI | " + timestamp
        
        logger.info("‚úì Response formatted successfully")
        return formatted_response
    
    def _generate_tips(self, query: str, interpretation: str) -> str:
        """
        Generate practical tips based on query context
        
        Args:
            query: User query
            interpretation: Legal interpretation
            
        Returns:
            Practical tips text
        """
        query_lower = query.lower()
        
        # Context-aware tips
        if '–≤–æ–∑–≤—Ä–∞—Ç' in query_lower or '–≤–µ—Ä–Ω—É—Ç—å' in query_lower:
            return "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –ø–æ–∫—É–ø–∫–µ\n‚Ä¢ –¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞–¥–ª–µ–∂–∞—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏\n‚Ä¢ –°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ—Ç —á–µ–∫–∞"
        
        elif '–¥–æ–≥–æ–≤–æ—Ä' in query_lower:
            return "‚Ä¢ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–µ–π –∏ –ø–µ—á–∞—Ç–µ–π\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –∫–æ–ø–∏–∏ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        
        elif '–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ' in query_lower or '–Ω–∞—Å–ª–µ–¥–Ω–∏–∫' in query_lower:
            return "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–æ—Ç–∞—Ä–∏—É—Å—É –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤\n‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —Ä–æ–¥—Å—Ç–≤–æ\n‚Ä¢ –£–∑–Ω–∞–π—Ç–µ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ–ª–≥–∞—Ö –Ω–∞—Å–ª–µ–¥–æ–¥–∞—Ç–µ–ª—è"
        
        elif '—Ä–∞–±–æ—Ç' in query_lower or '—Ç—Ä—É–¥–æ–≤' in query_lower:
            return "‚Ä¢ –¢—Ä–µ–±—É–π—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞\n‚Ä¢ –ó–Ω–∞–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–∞–≤–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä—É–¥–æ–≤–æ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π"
        
        elif '–∞—Ä–µ–Ω–¥' in query_lower:
            return "‚Ä¢ –ó–∞–∫–ª—é—á–∏—Ç–µ –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã\n‚Ä¢ –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ\n‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Å—Ä–æ–∫–∏ –æ–ø–ª–∞—Ç—ã"
        
        else:
            return "‚Ä¢ –ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —é—Ä–∏—Å—Ç–æ–º\n‚Ä¢ –°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–µ–ª—É –¥–æ–∫—É–º–µ–Ω—Ç—ã\n‚Ä¢ –î–µ–π—Å—Ç–≤—É–π—Ç–µ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω–æ–º —Å—Ä–æ–∫–∏"
    
    def format_error(self, error_message: str) -> str:
        """
        Format error message for user
        
        Args:
            error_message: Error description
            
        Returns:
            User-friendly error message
        """
        timestamp = datetime.now().strftime('%d.%m.%Y %H:%M')
        
        # Make error messages more user-friendly
        friendly_message = error_message
        if "—Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ" in error_message:
            return f"""üåç *–Ø–∑—ã–∫–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞*

{friendly_message}

üí° *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
‚Ä¢ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ `/help` - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
‚Ä¢ `/law <–Ω–æ–º–µ—Ä>` - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é

ü§ñ *MyzamAI | {timestamp}*"""
        elif "Broken pipe" in error_message or "Errno 32" in error_message:
            friendly_message = "–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        elif "Conflict" in error_message or "getUpdates" in error_message:
            friendly_message = "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        elif "timeout" in error_message.lower():
            friendly_message = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        return f"""‚ùå *–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞*

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.

*–ü—Ä–∏—á–∏–Ω–∞:* {friendly_message}

üí° *–ß—Ç–æ –¥–µ–ª–∞—Ç—å:*
‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏

‚ö†Ô∏è –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –±–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

ü§ñ MyzamAI | {timestamp}"""
    
    def format_welcome(self) -> str:
        """
        Format welcome message
        
        Returns:
            Welcome message
        """
        return """üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MyzamAI*

–Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –ø—Ä–∞–≤—É –ö—ã—Ä–≥—ã–∑—Å–∫–æ–π –†–µ—Å–ø—É–±–ª–∏–∫–∏. 

*–ß—Ç–æ —è —É–º–µ—é:*
‚öñÔ∏è –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
üìö –ù–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∑–∞–∫–æ–Ω–∞
üí° –î–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
üîÑ –†–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö

*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã?"
‚Ä¢ "–ú–æ–∂–Ω–æ –ª–∏ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –¥–æ—Å—Ä–æ—á–Ω–æ?"
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞?"

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/law <–Ω–æ–º–µ—Ä> - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é

‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ –ö–†. –í–æ–ø—Ä–æ—Å—ã –ø–æ —É–≥–æ–ª–æ–≤–Ω–æ–º—É, –Ω–∞–ª–æ–≥–æ–≤–æ–º—É –∏–ª–∏ —Å–µ–º–µ–π–Ω–æ–º—É –ø—Ä–∞–≤—É ‚Äî –≤–Ω–µ –º–æ–µ–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.

ü§ñ MyzamAI v1.0 | Powered by Meta Llama 3"""
    
    def format_help(self) -> str:
        """
        Format help message
        
        Returns:
            Help message
        """
        return """üìñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é MyzamAI*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/law <–Ω–æ–º–µ—Ä> - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏

*–ö–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã:*
‚úÖ –•–æ—Ä–æ—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞?"
‚Ä¢ "–ú–æ–∂–Ω–æ –ª–∏ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –¥–æ—Å—Ä–æ—á–Ω–æ?"
‚Ä¢ "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ?"

‚ùå –ü–ª–æ—Ö–∏–µ –ø—Ä–∏–º–µ—Ä—ã:
‚Ä¢ "–ü–æ–º–æ–≥–∏" (—Å–ª–∏—à–∫–æ–º –æ–±—â–∏–π)
‚Ä¢ "!!!" (–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)

*–û –±–æ—Ç–µ:*
ü§ñ MyzamAI - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º—É –ø—Ä–∞–≤—É –ö–†
‚ö° –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–∞–∑–µ Meta Llama 3
üìö –ë–∞–∑–∞: –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –ö–†

*–í–∞–∂–Ω–æ:*
‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä
‚Ä¢ –ù–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —é—Ä–∏—Å—Ç–∞
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ —É–≥–æ–ª–æ–≤–Ω–æ–º—É/—Å–µ–º–µ–π–Ω–æ–º—É –ø—Ä–∞–≤—É - –≤–Ω–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏

*–Ø–∑—ã–∫–∏:*
–ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

ü§ñ MyzamAI v1.0 | Powered by Meta Llama 3"""


def main():
    """
    Test the User Interface Agent
    """
    agent = UserInterfaceAgent()
    
    query = "–ú–æ–≥—É –ª–∏ —è –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä –±–µ–∑ —á–µ–∫–∞?"
    interpretation = "–°–æ–≥–ª–∞—Å–Ω–æ —Å—Ç–∞—Ç—å–µ 22 –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –ö–†, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞—Å—Å–æ–≤–æ–≥–æ —á–µ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –æ—Ç–∫–∞–∑–∞ –≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è."
    sources = ["–°—Ç–∞—Ç—å—è 22. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–∞—Å—Å–æ–≤–æ–≥–æ –∏–ª–∏ —Ç–æ–≤–∞—Ä–Ω–æ–≥–æ —á–µ–∫–∞..."]
    
    print("=" * 60)
    print("Formatted Response:")
    print("=" * 60)
    print(agent.format_response(query, interpretation, sources))
    
    print("\n" + "=" * 60)
    print("Welcome Message:")
    print("=" * 60)
    print(agent.format_welcome())


if __name__ == "__main__":
    main()

