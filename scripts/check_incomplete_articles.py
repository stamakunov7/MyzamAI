#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ò—â–µ—Ç —Å—Ç–∞—Ç—å–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω—ã
"""

import os
import re
from typing import List, Dict, Tuple


class ArticleCompletenessChecker:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É —Å—Ç–∞—Ç–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, data_file_path: str):
        """
        Initialize checker
        
        Args:
            data_file_path: Path to civil_code_chunks.txt
        """
        self.data_file_path = data_file_path
        self.incomplete_articles = []
        self.suspicious_patterns = [
            r'–ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è$',  # Ends with "–ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è"
            r'–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã$',  # Ends with "–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã"
            r'—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è$',  # Ends with "—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è"
            r'–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è$',  # Ends with "–æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è"
            r'—Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è$',  # Ends with "—Ä–µ–≥—É–ª–∏—Ä—É—é—Ç—Å—è"
            r'–æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è$',  # Ends with "–æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è"
            r'—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è$',  # Ends with "—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è"
            r'–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è$',  # Ends with "–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è"
            r'—Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è$',  # Ends with "—Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è"
            r'–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è$',  # Ends with "–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è"
        ]
    
    def check_article_completeness(self) -> List[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
        """
        print("üîç Checking article completeness...")
        
        if not os.path.exists(self.data_file_path):
            print(f"‚ùå Data file not found: {self.data_file_path}")
            return []
        
        # Read the data file
        with open(self.data_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        incomplete_articles = []
        
        # Find all article lines
        article_lines = []
        for i, line in enumerate(lines):
            if re.match(r'^–°—Ç–∞—Ç—å—è \d+:', line):
                article_lines.append((i, line))
        
        print(f"üìä Found {len(article_lines)} article lines")
        
        # Check each article
        for line_num, line in article_lines:
            # Extract article number
            match = re.match(r'^–°—Ç–∞—Ç—å—è (\d+):', line)
            if not match:
                continue
            
            article_num = int(match.group(1))
            
            # Check if article ends with suspicious patterns
            is_incomplete = self._check_article_incomplete(line)
            
            if is_incomplete:
                incomplete_articles.append({
                    'article': article_num,
                    'line': line_num,
                    'content': line,
                    'reason': 'Ends with incomplete sentence',
                    'suspicious_end': self._get_suspicious_end(line)
                })
                print(f"‚ö†Ô∏è  Article {article_num}: POTENTIALLY INCOMPLETE")
                print(f"   Line {line_num}: {line[:100]}...")
                print(f"   Ends with: '{self._get_suspicious_end(line)}'")
        
        self.incomplete_articles = incomplete_articles
        return incomplete_articles
    
    def _check_article_incomplete(self, line: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ–ø–æ–ª–Ω–∞—è –ª–∏ —Å—Ç–∞—Ç—å—è
        
        Args:
            line: –°—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—å–µ–π
            
        Returns:
            True –µ—Å–ª–∏ —Å—Ç–∞—Ç—å—è –Ω–µ–ø–æ–ª–Ω–∞—è
        """
        # Remove the article header
        content = re.sub(r'^–°—Ç–∞—Ç—å—è \d+: –°—Ç–∞—Ç—å—è \d+\. ', '', line)
        
        # Check if ends with suspicious patterns
        for pattern in self.suspicious_patterns:
            if re.search(pattern, content.strip()):
                return True
        
        # Check if ends with incomplete sentence (no period)
        if not content.strip().endswith('.'):
            return True
        
        # Check if very short (less than 100 characters after header)
        if len(content) < 100:
            return True
        
        return False
    
    def _get_suspicious_end(self, line: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        
        Args:
            line: –°—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç—å–µ–π
            
        Returns:
            –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
        """
        content = re.sub(r'^–°—Ç–∞—Ç—å—è \d+: –°—Ç–∞—Ç—å—è \d+\. ', '', line)
        return content.strip()[-50:] if len(content) > 50 else content.strip()
    
    def check_specific_articles(self, article_numbers: List[int]) -> Dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
        
        Args:
            article_numbers: –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        print(f"\nüîç Checking specific articles: {article_numbers}")
        
        if not os.path.exists(self.data_file_path):
            print(f"‚ùå Data file not found: {self.data_file_path}")
            return {}
        
        # Read the data file
        with open(self.data_file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        lines = content.split('\n')
        results = {}
        
        for article_num in article_numbers:
            print(f"\nüìö Checking Article {article_num}:")
            
            # Find all lines with this article
            article_lines = []
            for i, line in enumerate(lines):
                if f"–°—Ç–∞—Ç—å—è {article_num}:" in line and line.strip().startswith(f"–°—Ç–∞—Ç—å—è {article_num}:"):
                    article_lines.append((i, line))
            
            if not article_lines:
                print(f"   ‚ùå Article {article_num}: NOT FOUND")
                results[article_num] = {
                    'status': 'NOT_FOUND',
                    'lines': 0,
                    'is_complete': False
                }
                continue
            
            print(f"   üìä Found {len(article_lines)} lines")
            
            # Check completeness
            is_complete = True
            for line_num, line in article_lines:
                if self._check_article_incomplete(line):
                    is_complete = False
                    print(f"   ‚ö†Ô∏è  Line {line_num}: INCOMPLETE")
                    print(f"       Content: {line[:100]}...")
                    print(f"       Ends with: '{self._get_suspicious_end(line)}'")
                else:
                    print(f"   ‚úÖ Line {line_num}: COMPLETE")
                    print(f"       Content: {line[:100]}...")
            
            results[article_num] = {
                'status': 'COMPLETE' if is_complete else 'INCOMPLETE',
                'lines': len(article_lines),
                'is_complete': is_complete
            }
        
        return results
    
    def generate_report(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö
        
        Returns:
            –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
        """
        if not self.incomplete_articles:
            return "‚úÖ All articles appear to be complete!"
        
        report = f"üö® Found {len(self.incomplete_articles)} potentially incomplete articles:\n\n"
        
        for article in self.incomplete_articles:
            report += f"üìö Article {article['article']}:\n"
            report += f"   Line: {article['line']}\n"
            report += f"   Reason: {article['reason']}\n"
            report += f"   Content: {article['content'][:100]}...\n"
            report += f"   Ends with: '{article['suspicious_end']}'\n\n"
        
        return report


def main():
    """
    Main function
    """
    print("üîç Article Completeness Checker")
    print("="*50)
    
    # Get paths
    script_dir = os.path.dirname(os.path.abspath(__file__))
    data_file = os.path.join(script_dir, 'data', 'civil_code_chunks.txt')
    
    # Check if data file exists
    if not os.path.exists(data_file):
        print(f"‚ùå Data file not found: {data_file}")
        return
    
    # Initialize checker
    checker = ArticleCompletenessChecker(data_file)
    
    # Check all articles
    incomplete_articles = checker.check_article_completeness()
    
    # Check specific problematic articles
    problematic_articles = [379, 380, 381, 382, 383, 384, 385]
    specific_results = checker.check_specific_articles(problematic_articles)
    
    # Generate report
    report = checker.generate_report()
    print("\n" + "="*50)
    print("üìä COMPLETENESS REPORT")
    print("="*50)
    print(report)
    
    # Summary
    total_incomplete = len(incomplete_articles)
    total_checked = len(specific_results)
    incomplete_specific = sum(1 for r in specific_results.values() if not r['is_complete'])
    
    print(f"üìà SUMMARY:")
    print(f"   Total potentially incomplete articles: {total_incomplete}")
    print(f"   Specific articles checked: {total_checked}")
    print(f"   Incomplete specific articles: {incomplete_specific}")
    
    if total_incomplete == 0:
        print("üéâ All articles appear to be complete!")
    else:
        print("‚ö†Ô∏è  Some articles may be incomplete. Review the report above.")
    
    return {
        'incomplete_articles': incomplete_articles,
        'specific_results': specific_results,
        'total_incomplete': total_incomplete
    }


if __name__ == "__main__":
    main()
